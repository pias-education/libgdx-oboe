import java.io.FileWriter

plugins {
    id("kotlin-android")
    id("maven-publish")
    id("com.android.library")
}

dependencies {
    implementation(Dependencies.GDX_BACKEND_ANDROID)
    implementation(Dependencies.KOTLIN_STDLIB)
}

android {
    namespace = "com.pias_education.libgdxoboe"

    buildToolsVersion = AndroidConfig.BUILD_TOOLS
    compileSdkVersion = "android-${AndroidConfig.SDK}"
    ndkVersion = AndroidConfig.NDK

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    sourceSets {
        getByName("main") {
            manifest.srcFile("AndroidManifest.xml")
            kotlin.srcDirs("src/kotlin")
        }
    }

    defaultConfig {
        minSdk = AndroidConfig.MIN_SDK
        targetSdk = AndroidConfig.SDK

        ndk {
            abiFilters.addAll(listOf("x86", "x86_64", "armeabi-v7a", "arm64-v8a"))

            externalNativeBuild {
                cmake {
                    cppFlags("-std=c++17", "-O3", "-DCMAKE_BUILD_TYPE=Release", "-DNDEBUG")
                }
            }

            consumerProguardFile("proguard-rules.pro")
        }
    }

    externalNativeBuild {
        cmake {
            path("CMakeLists.txt")
        }
    }

    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

publishing {
    publications {
        register<MavenPublication>("release") {
            groupId = AppConfig.PUBLISHED_GROUP_ID
            artifactId = AppConfig.ARTIFACT_NAME
            version = AppConfig.VERSION

            pom {
                name.set(AppConfig.NAME)
                description.set(AppConfig.DESCRIPTION)
                url.set(AppConfig.SITE_URL)
                licenses {
                    license {
                        name.set(AppConfig.LICENSE_NAME)
                        url.set(AppConfig.LICENSE_URL)
                    }
                }
                developers {
                    developer {
                        id.set(AppConfig.DEVELOPER_ID)
                        email.set(AppConfig.DEVELOPER_EMAIL)
                    }
                }
                scm {
                    connection.set("scm:git:${AppConfig.GIT_URL}")
                    url.set(AppConfig.GIT_URL)
                }
            }

            afterEvaluate {
                from(components["release"])
            }
        }
    }
}

val avConfig: File = project.file("dependencies/ffmpeg/libavutil/avconfig.h")
if(avConfig.parentFile.exists() && !avConfig.exists()) {
    val writer = FileWriter(avConfig)
    writer.write("""
        /* Generated by ffconf */
        #ifndef AVUTIL_AVCONFIG_H
        #define AVUTIL_AVCONFIG_H
        #define AV_HAVE_BIGENDIAN 0
        #define AV_HAVE_FAST_UNALIGNED 0
        #endif /* AVUTIL_AVCONFIG_H */
    """.trimIndent())
    writer.close()
}